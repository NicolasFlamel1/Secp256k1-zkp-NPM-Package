// Use strict
"use strict";


// Constants

// Modules
const MODULES = [
	"@nicolasflamel/secp256k1-zkp-native",
	"@nicolasflamel/secp256k1-zkp-wasm",
	"@nicolasflamel/secp256k1-zkp-wasm.asmjs"
];

// Tests
const TESTS = [
	{
	
		// Name
		name: "blindSwitch",
		
		// Paramaters
		parameters: [
		
			// Blind
			Buffer.from([140, 56, 130, 251, 215, 150, 96, 133, 231, 96, 224, 0, 177, 234, 158, 177, 173, 61, 241, 238, 192, 46, 114, 10, 218, 165, 16, 76, 107, 217, 253, 136]),
			
			// Value
			"123456789"
		],
		
		// Result
		result: Buffer.from([181, 133, 73, 194, 116, 38, 117, 159, 80, 5, 133, 139, 16, 127, 173, 79, 87, 109, 227, 4, 3, 144, 152, 133, 72, 219, 214, 176, 169, 147, 122, 10])
	},
	{
	
		// Name
		name: "blindSum",
		
		// Paramaters
		parameters: [
		
			// Positive blinds
			[
				Buffer.from([140, 56, 130, 251, 215, 150, 96, 133, 231, 96, 224, 0, 177, 234, 158, 177, 173, 61, 241, 238, 192, 46, 114, 10, 218, 165, 16, 76, 107, 217, 253, 136]),
				Buffer.from([248, 67, 82, 47, 107, 186, 29, 161, 65, 78, 41, 190, 106, 55, 230, 197, 106, 8, 46, 157, 170, 36, 71, 198, 67, 40, 86, 65, 221, 125, 41, 236]),
				Buffer.from([188, 16, 94, 138, 134, 168, 26, 184, 98, 139, 143, 113, 182, 28, 71, 48, 185, 158, 120, 30, 200, 22, 229, 215, 249, 254, 244, 147, 98, 152, 139, 172])
			],
			
			// Negative blinds
			[
			
				Buffer.from([234, 33, 24, 85, 85, 106, 251, 89, 24, 224, 16, 139, 238, 106, 8, 25, 19, 145, 205, 178, 172, 91, 208, 247, 198, 165, 127, 201, 108, 232, 35, 242]),
				Buffer.from([93, 56, 253, 98, 35, 251, 50, 8, 6, 218, 200, 230, 229, 59, 60, 152, 118, 51, 234, 182, 113, 173, 222, 131, 151, 115, 120, 50, 33, 34, 241, 252])
			]
		],
		
		// Result
		result: Buffer.from([249, 50, 29, 254, 80, 146, 107, 126, 107, 127, 191, 189, 254, 153, 135, 246, 71, 30, 224, 66, 20, 95, 240, 45, 185, 179, 99, 38, 29, 228, 157, 50])
	},
	{
	
		// Name
		name: "isValidSecretKey",
		
		// Paramaters
		parameters: [
		
			// Secret key
			Buffer.from([140, 56, 130, 251, 215, 150, 96, 133, 231, 96, 224, 0, 177, 234, 158, 177, 173, 61, 241, 238, 192, 46, 114, 10, 218, 165, 16, 76, 107, 217, 253, 136])
		],
		
		// Result
		result: true
	},
	{
	
		// Name
		name: "isValidPublicKey",
		
		// Paramaters
		parameters: [
		
			// Public key
			Buffer.from([3, 231, 227, 221, 84, 124, 195, 23, 31, 253, 196, 3, 130, 79, 204, 93, 93, 3, 113, 42, 41, 244, 89, 202, 16, 102, 140, 40, 100, 192, 136, 233, 81])
		],
		
		// Result
		result: true
	},
	{
	
		// Name
		name: "isValidCommit",
		
		// Paramaters
		parameters: [
		
			// Commit
			Buffer.from([8, 136, 58, 63, 129, 100, 25, 212, 206, 91, 244, 78, 50, 12, 36, 197, 176, 155, 6, 33, 199, 15, 183, 128, 215, 163, 92, 134, 87, 11, 211, 84, 117])
		],
		
		// Result
		result: true
	},
	{
	
		// Name
		name: "isValidSingleSignerSignature",
		
		// Paramaters
		parameters: [
		
			// Signature
			Buffer.from([244, 154, 253, 204, 19, 193, 100, 128, 175, 242, 127, 200, 108, 90, 166, 64, 231, 7, 46, 160, 98, 227, 217, 12, 207, 203, 255, 22, 32, 166, 108, 188, 161, 66, 204, 149, 52, 20, 221, 38, 89, 81, 235, 96, 108, 208, 102, 9, 231, 5, 27, 163, 199, 20, 78, 25, 25, 113, 114, 152, 209, 29, 201, 215])
		],
		
		// Result
		result: true
	},
	{
	
		// Name
		name: "createBulletproof",
		
		// Paramaters
		parameters: [
		
			// Blind
			Buffer.from([8, 136, 58, 63, 129, 100, 25, 212, 206, 91, 244, 78, 50, 12, 36, 197, 176, 155, 6, 33, 199, 15, 183, 128, 215, 163, 92, 134, 87, 11, 211, 84]),
			
			// Value
			"123456789",
			
			// Nonce
			Buffer.from([116, 38, 86, 104, 180, 194, 217, 1, 181, 131, 93, 233, 83, 243, 186, 30, 29, 124, 232, 139, 126, 140, 168, 158, 98, 86, 20, 84, 4, 170, 195, 48]),
			
			// Private nonce
			Buffer.from([88, 63, 88, 225, 81, 82, 130, 207, 213, 118, 49, 152, 103, 175, 180, 246, 18, 70, 25, 147, 192, 6, 26, 52, 75, 137, 225, 48, 86, 114, 94, 171]),
			
			// Extra commit
			Buffer.from([]),
			
			// Message
			Buffer.from([0, 0, 0, 2, 28, 173, 236, 185, 64, 48, 35, 56, 53, 65, 130, 238, 103, 162, 19, 186])
		],
		
		// Result
		result: Buffer.from([89, 114, 246, 201, 217, 218, 95, 239, 51, 102, 27, 51, 132, 169, 13, 17, 195, 218, 136, 229, 121, 255, 249, 61, 109, 113, 248, 142, 243, 241, 196, 39, 29, 88, 176, 77, 6, 161, 192, 201, 108, 43, 16, 238, 217, 224, 193, 20, 89, 247, 90, 180, 197, 164, 162, 102, 82, 77, 170, 254, 236, 249, 50, 67, 13, 49, 177, 18, 41, 17, 111, 139, 1, 108, 131, 94, 53, 154, 223, 168, 223, 165, 130, 199, 206, 0, 219, 168, 23, 164, 90, 157, 224, 196, 16, 37, 250, 215, 232, 222, 100, 29, 202, 201, 78, 154, 175, 153, 25, 94, 116, 93, 75, 39, 11, 241, 241, 161, 142, 16, 255, 200, 111, 116, 57, 87, 166, 31, 36, 170, 137, 181, 61, 131, 84, 88, 128, 240, 232, 140, 80, 16, 227, 245, 24, 21, 214, 234, 210, 114, 228, 224, 243, 53, 75, 45, 72, 141, 50, 234, 218, 155, 58, 217, 200, 231, 185, 199, 113, 168, 113, 43, 244, 15, 84, 142, 196, 255, 61, 250, 87, 145, 152, 75, 152, 14, 23, 128, 201, 134, 127, 152, 175, 162, 80, 242, 239, 44, 128, 244, 94, 104, 15, 175, 239, 240, 52, 183, 251, 178, 134, 153, 203, 16, 216, 116, 199, 234, 106, 96, 17, 76, 215, 19, 226, 92, 14, 129, 145, 160, 221, 84, 180, 62, 73, 242, 164, 251, 181, 18, 129, 174, 199, 149, 194, 178, 61, 213, 145, 135, 170, 174, 173, 150, 154, 106, 164, 245, 179, 99, 60, 23, 9, 170, 97, 56, 12, 117, 205, 101, 20, 93, 231, 133, 107, 231, 233, 188, 32, 42, 26, 251, 188, 126, 92, 65, 4, 133, 90, 225, 24, 97, 52, 212, 102, 105, 196, 33, 194, 224, 158, 240, 221, 34, 21, 17, 50, 179, 15, 223, 215, 221, 43, 205, 28, 203, 145, 41, 158, 151, 51, 56, 33, 230, 6, 16, 169, 145, 160, 129, 162, 166, 234, 112, 187, 199, 169, 105, 175, 143, 56, 103, 102, 226, 45, 228, 205, 185, 154, 26, 51, 219, 161, 16, 3, 198, 209, 175, 179, 26, 80, 20, 43, 120, 237, 251, 3, 189, 203, 4, 183, 55, 119, 31, 109, 172, 93, 77, 170, 84, 251, 172, 254, 191, 177, 203, 96, 150, 38, 116, 142, 189, 227, 17, 113, 149, 209, 248, 171, 202, 31, 119, 178, 8, 61, 141, 185, 49, 134, 89, 68, 167, 123, 56, 55, 216, 35, 77, 245, 105, 92, 52, 99, 107, 190, 232, 215, 6, 139, 66, 54, 27, 132, 176, 17, 157, 84, 95, 199, 154, 80, 147, 9, 70, 100, 241, 41, 96, 53, 17, 209, 168, 246, 74, 84, 125, 196, 248, 73, 23, 76, 75, 84, 72, 188, 46, 236, 209, 102, 204, 69, 120, 16, 44, 226, 25, 104, 25, 213, 32, 228, 21, 158, 72, 239, 32, 84, 121, 185, 126, 128, 121, 164, 250, 112, 162, 134, 74, 174, 220, 220, 133, 172, 210, 53, 75, 72, 245, 246, 16, 106, 89, 34, 55, 44, 3, 126, 246, 236, 20, 27, 56, 152, 117, 253, 104, 25, 94, 118, 218, 190, 106, 152, 92, 21, 208, 100, 191, 144, 45, 241, 84, 178, 12, 19, 32, 139, 195, 160, 50, 120, 135, 239, 12, 214, 198, 135, 186, 26, 96, 56, 130, 84, 232, 44, 216, 175, 135, 181, 224, 189, 122, 170, 56, 144, 25, 80, 173, 166, 140, 129, 208, 179, 106, 195, 13, 79, 136, 88, 112, 201, 193, 223, 198, 223, 192, 219, 224, 102, 50, 113, 92, 120, 137, 130, 60, 213, 143, 231, 106, 116, 51, 125, 101, 32, 171, 211, 144, 189, 0, 96, 169, 206, 211, 195, 194, 140, 228, 14, 90, 15, 219, 108, 223, 49, 114, 173, 224, 131, 72, 15, 100, 179, 43, 149, 113, 193, 7, 219, 45, 245, 62, 171, 107, 132, 55, 236, 5, 73, 33, 131, 176, 11, 28, 189, 154, 113, 116, 167, 203, 34, 52, 108, 209, 173])
	},
	{
	
		// Name
		name: "createBulletproofBlindless",
		
		// Paramaters
		parameters: [
		
			// Tau X
			Buffer.from([203, 19, 160, 159, 76, 44, 14, 170, 249, 210, 185, 42, 216, 16, 36, 91, 35, 204, 170, 37, 184, 94, 197, 79, 163, 131, 159, 45, 1, 137, 163, 89]),
			
			// T one
			Buffer.from([3, 117, 87, 71, 141, 103, 90, 42, 251, 38, 126, 21, 111, 198, 70, 52, 173, 137, 68, 178, 71, 162, 204, 210, 245, 58, 95, 181, 44, 240, 220, 242, 205]),
			
			// T two
			Buffer.from([3, 170, 108, 93, 94, 12, 111, 116, 45, 30, 103, 88, 2, 39, 40, 44, 244, 146, 109, 19, 243, 76, 234, 123, 175, 4, 237, 77, 30, 93, 76, 16, 148]),
			
			// Commit
			Buffer.from([8, 180, 228, 226, 109, 124, 176, 39, 187, 228, 131, 170, 105, 232, 68, 6, 242, 100, 122, 166, 151, 58, 222, 240, 172, 74, 96, 253, 82, 20, 122, 153, 131]),
			
			// Value
			"4802398464961669",
			
			// Nonce
			Buffer.from([116, 38, 86, 104, 180, 194, 217, 1, 181, 131, 93, 233, 83, 243, 186, 30, 29, 124, 232, 139, 126, 140, 168, 158, 98, 86, 20, 84, 4, 170, 195, 48]),
			
			// Extra commit
			Buffer.from([]),
			
			// Message
			Buffer.from([0, 0, 0, 2, 28, 173, 236, 185, 64, 48, 35, 56, 53, 65, 130, 238, 103, 162, 19, 186])
		],
		
		// Result
		result: Buffer.from([52, 236, 95, 96, 179, 211, 241, 85, 6, 45, 70, 213, 39, 239, 219, 163, 150, 226, 50, 192, 246, 233, 218, 236, 28, 78, 191, 95, 206, 172, 157, 232, 113, 189, 186, 62, 220, 127, 180, 136, 228, 70, 101, 237, 39, 137, 231, 158, 1, 116, 48, 138, 255, 174, 58, 125, 195, 47, 51, 189, 62, 63, 191, 85, 4, 193, 202, 10, 206, 57, 183, 120, 74, 255, 213, 213, 162, 254, 154, 104, 12, 152, 216, 75, 85, 253, 249, 160, 122, 210, 58, 29, 136, 32, 81, 95, 33, 215, 232, 222, 100, 29, 202, 201, 78, 154, 175, 153, 25, 94, 116, 93, 75, 39, 11, 241, 241, 161, 142, 16, 255, 200, 111, 116, 57, 87, 166, 31, 36, 229, 106, 239, 171, 10, 180, 79, 160, 204, 4, 49, 74, 58, 242, 236, 208, 189, 31, 185, 238, 35, 4, 119, 16, 218, 43, 136, 64, 244, 176, 5, 66, 2, 41, 60, 56, 229, 148, 111, 160, 248, 77, 212, 175, 176, 127, 134, 144, 143, 228, 232, 16, 146, 94, 75, 167, 119, 222, 153, 133, 42, 49, 221, 132, 182, 44, 255, 243, 135, 61, 122, 44, 6, 124, 199, 222, 215, 225, 225, 68, 153, 7, 150, 81, 184, 132, 66, 198, 144, 23, 21, 171, 65, 90, 239, 232, 95, 11, 177, 157, 243, 5, 166, 135, 104, 162, 250, 188, 248, 95, 241, 43, 131, 14, 143, 136, 253, 209, 37, 4, 23, 5, 190, 88, 158, 56, 142, 231, 0, 55, 140, 205, 193, 152, 230, 176, 225, 108, 118, 58, 23, 109, 82, 39, 39, 195, 241, 63, 161, 193, 130, 29, 96, 135, 92, 200, 154, 49, 158, 173, 101, 5, 92, 150, 67, 174, 69, 171, 14, 178, 59, 30, 99, 39, 104, 196, 202, 141, 50, 170, 15, 169, 26, 196, 160, 216, 51, 219, 216, 101, 243, 114, 215, 60, 91, 165, 189, 87, 255, 168, 54, 233, 81, 76, 242, 31, 185, 117, 96, 168, 66, 130, 213, 32, 57, 232, 160, 164, 126, 210, 126, 106, 232, 75, 2, 1, 157, 1, 232, 36, 99, 165, 54, 235, 26, 133, 30, 38, 201, 217, 184, 213, 161, 156, 90, 192, 197, 93, 36, 203, 64, 84, 68, 47, 174, 240, 67, 174, 250, 48, 17, 246, 87, 212, 73, 93, 170, 239, 37, 117, 0, 175, 196, 251, 7, 15, 79, 47, 199, 171, 181, 222, 2, 142, 119, 212, 169, 129, 116, 220, 193, 112, 215, 15, 180, 194, 86, 21, 155, 110, 242, 224, 118, 143, 121, 28, 16, 48, 197, 99, 129, 51, 227, 130, 200, 13, 143, 231, 171, 234, 188, 134, 154, 14, 94, 217, 114, 22, 15, 48, 35, 163, 253, 117, 220, 224, 74, 63, 92, 76, 197, 155, 208, 145, 107, 94, 18, 133, 11, 136, 242, 143, 146, 3, 159, 0, 217, 231, 225, 136, 120, 97, 88, 28, 57, 254, 12, 234, 65, 5, 221, 222, 214, 140, 226, 82, 51, 189, 211, 199, 154, 10, 146, 212, 36, 17, 209, 122, 133, 84, 213, 2, 167, 216, 167, 168, 135, 206, 100, 12, 233, 118, 70, 155, 119, 136, 135, 207, 237, 89, 172, 51, 27, 215, 174, 65, 36, 52, 18, 129, 40, 135, 221, 180, 19, 170, 41, 166, 69, 148, 231, 88, 63, 23, 119, 69, 13, 160, 135, 19, 222, 75, 4, 144, 51, 0, 214, 1, 95, 229, 37, 130, 32, 200, 226, 154, 143, 90, 185, 54, 84, 179, 85, 198, 134, 110, 181, 224, 118, 158, 5, 229, 35, 254, 64, 46, 97, 30, 215, 77, 107, 147, 220, 202, 96, 172, 159, 90, 20, 148, 166, 111, 34, 8, 229, 166, 120, 228, 243, 65, 169, 230, 243, 52, 137, 88, 150, 240, 189, 199, 92, 7, 177, 183, 177, 42, 95, 80, 150, 191, 86, 30, 225, 222, 41, 8, 143, 25, 170, 219, 43, 10, 79, 251, 179, 226, 139, 200, 187, 124, 50, 191, 186, 87, 118, 198])
	},
	{
	
		// Name
		name: "rewindBulletproof",
		
		// Paramaters
		parameters: [
		
			// Proof
			Buffer.from([52, 236, 95, 96, 179, 211, 241, 85, 6, 45, 70, 213, 39, 239, 219, 163, 150, 226, 50, 192, 246, 233, 218, 236, 28, 78, 191, 95, 206, 172, 157, 232, 113, 189, 186, 62, 220, 127, 180, 136, 228, 70, 101, 237, 39, 137, 231, 158, 1, 116, 48, 138, 255, 174, 58, 125, 195, 47, 51, 189, 62, 63, 191, 85, 4, 193, 202, 10, 206, 57, 183, 120, 74, 255, 213, 213, 162, 254, 154, 104, 12, 152, 216, 75, 85, 253, 249, 160, 122, 210, 58, 29, 136, 32, 81, 95, 33, 215, 232, 222, 100, 29, 202, 201, 78, 154, 175, 153, 25, 94, 116, 93, 75, 39, 11, 241, 241, 161, 142, 16, 255, 200, 111, 116, 57, 87, 166, 31, 36, 229, 106, 239, 171, 10, 180, 79, 160, 204, 4, 49, 74, 58, 242, 236, 208, 189, 31, 185, 238, 35, 4, 119, 16, 218, 43, 136, 64, 244, 176, 5, 66, 2, 41, 60, 56, 229, 148, 111, 160, 248, 77, 212, 175, 176, 127, 134, 144, 143, 228, 232, 16, 146, 94, 75, 167, 119, 222, 153, 133, 42, 49, 221, 132, 182, 44, 255, 243, 135, 61, 122, 44, 6, 124, 199, 222, 215, 225, 225, 68, 153, 7, 150, 81, 184, 132, 66, 198, 144, 23, 21, 171, 65, 90, 239, 232, 95, 11, 177, 157, 243, 5, 166, 135, 104, 162, 250, 188, 248, 95, 241, 43, 131, 14, 143, 136, 253, 209, 37, 4, 23, 5, 190, 88, 158, 56, 142, 231, 0, 55, 140, 205, 193, 152, 230, 176, 225, 108, 118, 58, 23, 109, 82, 39, 39, 195, 241, 63, 161, 193, 130, 29, 96, 135, 92, 200, 154, 49, 158, 173, 101, 5, 92, 150, 67, 174, 69, 171, 14, 178, 59, 30, 99, 39, 104, 196, 202, 141, 50, 170, 15, 169, 26, 196, 160, 216, 51, 219, 216, 101, 243, 114, 215, 60, 91, 165, 189, 87, 255, 168, 54, 233, 81, 76, 242, 31, 185, 117, 96, 168, 66, 130, 213, 32, 57, 232, 160, 164, 126, 210, 126, 106, 232, 75, 2, 1, 157, 1, 232, 36, 99, 165, 54, 235, 26, 133, 30, 38, 201, 217, 184, 213, 161, 156, 90, 192, 197, 93, 36, 203, 64, 84, 68, 47, 174, 240, 67, 174, 250, 48, 17, 246, 87, 212, 73, 93, 170, 239, 37, 117, 0, 175, 196, 251, 7, 15, 79, 47, 199, 171, 181, 222, 2, 142, 119, 212, 169, 129, 116, 220, 193, 112, 215, 15, 180, 194, 86, 21, 155, 110, 242, 224, 118, 143, 121, 28, 16, 48, 197, 99, 129, 51, 227, 130, 200, 13, 143, 231, 171, 234, 188, 134, 154, 14, 94, 217, 114, 22, 15, 48, 35, 163, 253, 117, 220, 224, 74, 63, 92, 76, 197, 155, 208, 145, 107, 94, 18, 133, 11, 136, 242, 143, 146, 3, 159, 0, 217, 231, 225, 136, 120, 97, 88, 28, 57, 254, 12, 234, 65, 5, 221, 222, 214, 140, 226, 82, 51, 189, 211, 199, 154, 10, 146, 212, 36, 17, 209, 122, 133, 84, 213, 2, 167, 216, 167, 168, 135, 206, 100, 12, 233, 118, 70, 155, 119, 136, 135, 207, 237, 89, 172, 51, 27, 215, 174, 65, 36, 52, 18, 129, 40, 135, 221, 180, 19, 170, 41, 166, 69, 148, 231, 88, 63, 23, 119, 69, 13, 160, 135, 19, 222, 75, 4, 144, 51, 0, 214, 1, 95, 229, 37, 130, 32, 200, 226, 154, 143, 90, 185, 54, 84, 179, 85, 198, 134, 110, 181, 224, 118, 158, 5, 229, 35, 254, 64, 46, 97, 30, 215, 77, 107, 147, 220, 202, 96, 172, 159, 90, 20, 148, 166, 111, 34, 8, 229, 166, 120, 228, 243, 65, 169, 230, 243, 52, 137, 88, 150, 240, 189, 199, 92, 7, 177, 183, 177, 42, 95, 80, 150, 191, 86, 30, 225, 222, 41, 8, 143, 25, 170, 219, 43, 10, 79, 251, 179, 226, 139, 200, 187, 124, 50, 191, 186, 87, 118, 198]),
			
			// Commit
			Buffer.from([8, 180, 228, 226, 109, 124, 176, 39, 187, 228, 131, 170, 105, 232, 68, 6, 242, 100, 122, 166, 151, 58, 222, 240, 172, 74, 96, 253, 82, 20, 122, 153, 131]),
			
			// Nonce
			Buffer.from([116, 38, 86, 104, 180, 194, 217, 1, 181, 131, 93, 233, 83, 243, 186, 30, 29, 124, 232, 139, 126, 140, 168, 158, 98, 86, 20, 84, 4, 170, 195, 48])
		],
		
		// Result
		result: {
		
			// Value
			Value: "4802398464961669",
			
			// Blind
			Blind: Buffer.from([175, 211, 174, 138, 146, 221, 4, 158, 236, 236, 193, 121, 212, 93, 21, 62, 0, 108, 55, 104, 151, 151, 241, 34, 131, 19, 22, 200, 5, 184, 199, 143]),
			
			// Message
			Message: Buffer.from([0, 0, 0, 2, 28, 173, 236, 185, 64, 48, 35, 56, 53, 65, 130, 238, 103, 162, 19, 186])
		}
	},
	{
	
		// Name
		name: "verifyBulletproof",
		
		// Paramaters
		parameters: [
		
			// Proof
			Buffer.from([52, 236, 95, 96, 179, 211, 241, 85, 6, 45, 70, 213, 39, 239, 219, 163, 150, 226, 50, 192, 246, 233, 218, 236, 28, 78, 191, 95, 206, 172, 157, 232, 113, 189, 186, 62, 220, 127, 180, 136, 228, 70, 101, 237, 39, 137, 231, 158, 1, 116, 48, 138, 255, 174, 58, 125, 195, 47, 51, 189, 62, 63, 191, 85, 4, 193, 202, 10, 206, 57, 183, 120, 74, 255, 213, 213, 162, 254, 154, 104, 12, 152, 216, 75, 85, 253, 249, 160, 122, 210, 58, 29, 136, 32, 81, 95, 33, 215, 232, 222, 100, 29, 202, 201, 78, 154, 175, 153, 25, 94, 116, 93, 75, 39, 11, 241, 241, 161, 142, 16, 255, 200, 111, 116, 57, 87, 166, 31, 36, 229, 106, 239, 171, 10, 180, 79, 160, 204, 4, 49, 74, 58, 242, 236, 208, 189, 31, 185, 238, 35, 4, 119, 16, 218, 43, 136, 64, 244, 176, 5, 66, 2, 41, 60, 56, 229, 148, 111, 160, 248, 77, 212, 175, 176, 127, 134, 144, 143, 228, 232, 16, 146, 94, 75, 167, 119, 222, 153, 133, 42, 49, 221, 132, 182, 44, 255, 243, 135, 61, 122, 44, 6, 124, 199, 222, 215, 225, 225, 68, 153, 7, 150, 81, 184, 132, 66, 198, 144, 23, 21, 171, 65, 90, 239, 232, 95, 11, 177, 157, 243, 5, 166, 135, 104, 162, 250, 188, 248, 95, 241, 43, 131, 14, 143, 136, 253, 209, 37, 4, 23, 5, 190, 88, 158, 56, 142, 231, 0, 55, 140, 205, 193, 152, 230, 176, 225, 108, 118, 58, 23, 109, 82, 39, 39, 195, 241, 63, 161, 193, 130, 29, 96, 135, 92, 200, 154, 49, 158, 173, 101, 5, 92, 150, 67, 174, 69, 171, 14, 178, 59, 30, 99, 39, 104, 196, 202, 141, 50, 170, 15, 169, 26, 196, 160, 216, 51, 219, 216, 101, 243, 114, 215, 60, 91, 165, 189, 87, 255, 168, 54, 233, 81, 76, 242, 31, 185, 117, 96, 168, 66, 130, 213, 32, 57, 232, 160, 164, 126, 210, 126, 106, 232, 75, 2, 1, 157, 1, 232, 36, 99, 165, 54, 235, 26, 133, 30, 38, 201, 217, 184, 213, 161, 156, 90, 192, 197, 93, 36, 203, 64, 84, 68, 47, 174, 240, 67, 174, 250, 48, 17, 246, 87, 212, 73, 93, 170, 239, 37, 117, 0, 175, 196, 251, 7, 15, 79, 47, 199, 171, 181, 222, 2, 142, 119, 212, 169, 129, 116, 220, 193, 112, 215, 15, 180, 194, 86, 21, 155, 110, 242, 224, 118, 143, 121, 28, 16, 48, 197, 99, 129, 51, 227, 130, 200, 13, 143, 231, 171, 234, 188, 134, 154, 14, 94, 217, 114, 22, 15, 48, 35, 163, 253, 117, 220, 224, 74, 63, 92, 76, 197, 155, 208, 145, 107, 94, 18, 133, 11, 136, 242, 143, 146, 3, 159, 0, 217, 231, 225, 136, 120, 97, 88, 28, 57, 254, 12, 234, 65, 5, 221, 222, 214, 140, 226, 82, 51, 189, 211, 199, 154, 10, 146, 212, 36, 17, 209, 122, 133, 84, 213, 2, 167, 216, 167, 168, 135, 206, 100, 12, 233, 118, 70, 155, 119, 136, 135, 207, 237, 89, 172, 51, 27, 215, 174, 65, 36, 52, 18, 129, 40, 135, 221, 180, 19, 170, 41, 166, 69, 148, 231, 88, 63, 23, 119, 69, 13, 160, 135, 19, 222, 75, 4, 144, 51, 0, 214, 1, 95, 229, 37, 130, 32, 200, 226, 154, 143, 90, 185, 54, 84, 179, 85, 198, 134, 110, 181, 224, 118, 158, 5, 229, 35, 254, 64, 46, 97, 30, 215, 77, 107, 147, 220, 202, 96, 172, 159, 90, 20, 148, 166, 111, 34, 8, 229, 166, 120, 228, 243, 65, 169, 230, 243, 52, 137, 88, 150, 240, 189, 199, 92, 7, 177, 183, 177, 42, 95, 80, 150, 191, 86, 30, 225, 222, 41, 8, 143, 25, 170, 219, 43, 10, 79, 251, 179, 226, 139, 200, 187, 124, 50, 191, 186, 87, 118, 198]),
			
			// Commit
			Buffer.from([8, 180, 228, 226, 109, 124, 176, 39, 187, 228, 131, 170, 105, 232, 68, 6, 242, 100, 122, 166, 151, 58, 222, 240, 172, 74, 96, 253, 82, 20, 122, 153, 131]),
			
			// Extra commit
			Buffer.from([])
		],
		
		// Result
		result: true
	},
	{
	
		// Name
		name: "publicKeyFromSecretKey",
		
		// Paramaters
		parameters: [
		
			// Secret key
			Buffer.from([140, 56, 130, 251, 215, 150, 96, 133, 231, 96, 224, 0, 177, 234, 158, 177, 173, 61, 241, 238, 192, 46, 114, 10, 218, 165, 16, 76, 107, 217, 253, 136])
		],
		
		// Result
		result: Buffer.from([3, 231, 227, 221, 84, 124, 195, 23, 31, 253, 196, 3, 130, 79, 204, 93, 93, 3, 113, 42, 41, 244, 89, 202, 16, 102, 140, 40, 100, 192, 136, 233, 81])
	},
	{
	
		// Name
		name: "publicKeyFromData",
		
		// Paramaters
		parameters: [
		
			// Data
			Buffer.from([3, 231, 227, 221, 84, 124, 195, 23, 31, 253, 196, 3, 130, 79, 204, 93, 93, 3, 113, 42, 41, 244, 89, 202, 16, 102, 140, 40, 100, 192, 136, 233, 81])
		],
		
		// Result
		result: Buffer.from([3, 231, 227, 221, 84, 124, 195, 23, 31, 253, 196, 3, 130, 79, 204, 93, 93, 3, 113, 42, 41, 244, 89, 202, 16, 102, 140, 40, 100, 192, 136, 233, 81])
	},
	{
	
		// Name
		name: "uncompressPublicKey",
		
		// Paramaters
		parameters: [
		
			// Public key
			Buffer.from([3, 231, 227, 221, 84, 124, 195, 23, 31, 253, 196, 3, 130, 79, 204, 93, 93, 3, 113, 42, 41, 244, 89, 202, 16, 102, 140, 40, 100, 192, 136, 233, 81])
		],
		
		// Result
		result: Buffer.from([4, 231, 227, 221, 84, 124, 195, 23, 31, 253, 196, 3, 130, 79, 204, 93, 93, 3, 113, 42, 41, 244, 89, 202, 16, 102, 140, 40, 100, 192, 136, 233, 81, 140, 16, 155, 164, 114, 26, 68, 91, 190, 246, 81, 107, 148, 247, 26, 210, 244, 61, 255, 147, 142, 9, 134, 243, 254, 55, 26, 38, 215, 254, 236, 73])
	},
	{
	
		// Name
		name: "secretKeyTweakAdd",
		
		// Paramaters
		parameters: [
		
			// Secret key
			Buffer.from([140, 56, 130, 251, 215, 150, 96, 133, 231, 96, 224, 0, 177, 234, 158, 177, 173, 61, 241, 238, 192, 46, 114, 10, 218, 165, 16, 76, 107, 217, 253, 136]),
			
			// Tweak
			Buffer.from([127, 100, 177, 134, 27, 145, 57, 192, 96, 31, 99, 121, 87, 130, 109, 168, 11, 179, 119, 58, 219, 200, 199, 2, 101, 160, 195, 237, 182, 253, 163, 59])
		],
		
		// Result
		result: Buffer.from([11, 157, 52, 129, 243, 39, 154, 70, 71, 128, 67, 122, 9, 109, 12, 90, 254, 66, 140, 66, 236, 174, 152, 209, 128, 115, 117, 173, 82, 161, 95, 130])
	},
	{
	
		// Name
		name: "publicKeyTweakAdd",
		
		// Paramaters
		parameters: [
		
			// Public key
			Buffer.from([3, 231, 227, 221, 84, 124, 195, 23, 31, 253, 196, 3, 130, 79, 204, 93, 93, 3, 113, 42, 41, 244, 89, 202, 16, 102, 140, 40, 100, 192, 136, 233, 81]),
			
			// Tweak
			Buffer.from([127, 100, 177, 134, 27, 145, 57, 192, 96, 31, 99, 121, 87, 130, 109, 168, 11, 179, 119, 58, 219, 200, 199, 2, 101, 160, 195, 237, 182, 253, 163, 59])
		],
		
		// Result
		result: Buffer.from([3, 160, 76, 223, 99, 248, 211, 102, 121, 145, 97, 154, 19, 29, 233, 152, 97, 207, 170, 84, 222, 60, 20, 1, 165, 15, 208, 101, 203, 205, 70, 131, 82])
	},
	{
	
		// Name
		name: "secretKeyTweakMultiply",
		
		// Paramaters
		parameters: [
		
			// Secret key
			Buffer.from([140, 56, 130, 251, 215, 150, 96, 133, 231, 96, 224, 0, 177, 234, 158, 177, 173, 61, 241, 238, 192, 46, 114, 10, 218, 165, 16, 76, 107, 217, 253, 136]),
			
			// Tweak
			Buffer.from([127, 100, 177, 134, 27, 145, 57, 192, 96, 31, 99, 121, 87, 130, 109, 168, 11, 179, 119, 58, 219, 200, 199, 2, 101, 160, 195, 237, 182, 253, 163, 59])
		],
		
		// Result
		result: Buffer.from([243, 180, 28, 173, 251, 26, 115, 173, 206, 250, 187, 57, 79, 40, 235, 138, 142, 253, 97, 138, 166, 172, 185, 148, 152, 223, 154, 62, 185, 68, 125, 231])
	},
	{
	
		// Name
		name: "publicKeyTweakMultiply",
		
		// Paramaters
		parameters: [
		
			// Public key
			Buffer.from([3, 231, 227, 221, 84, 124, 195, 23, 31, 253, 196, 3, 130, 79, 204, 93, 93, 3, 113, 42, 41, 244, 89, 202, 16, 102, 140, 40, 100, 192, 136, 233, 81]),
			
			// Tweak
			Buffer.from([127, 100, 177, 134, 27, 145, 57, 192, 96, 31, 99, 121, 87, 130, 109, 168, 11, 179, 119, 58, 219, 200, 199, 2, 101, 160, 195, 237, 182, 253, 163, 59])
		],
		
		// Result
		result: Buffer.from([2, 146, 16, 238, 31, 177, 11, 44, 10, 69, 25, 130, 155, 17, 51, 150, 81, 202, 9, 134, 226, 20, 232, 90, 169, 99, 40, 183, 108, 22, 155, 112, 58])
	},
	{
	
		// Name
		name: "sharedSecretKeyFromSecretKeyAndPublicKey",
		
		// Paramaters
		parameters: [
		
			// Secret key
			Buffer.from([140, 56, 130, 251, 215, 150, 96, 133, 231, 96, 224, 0, 177, 234, 158, 177, 173, 61, 241, 238, 192, 46, 114, 10, 218, 165, 16, 76, 107, 217, 253, 136]),
			
			// Public key
			Buffer.from([3, 231, 227, 221, 84, 124, 195, 23, 31, 253, 196, 3, 130, 79, 204, 93, 93, 3, 113, 42, 41, 244, 89, 202, 16, 102, 140, 40, 100, 192, 136, 233, 81])
		],
		
		// Result
		result: Buffer.from([73, 195, 194, 129, 150, 250, 40, 143, 184, 54, 132, 0, 99, 37, 100, 252, 62, 19, 58, 27, 220, 212, 153, 216, 214, 181, 240, 7, 59, 148, 142, 185])
	},
	{
	
		// Name
		name: "pedersenCommit",
		
		// Paramaters
		parameters: [
		
			// Blind
			Buffer.from([140, 56, 130, 251, 215, 150, 96, 133, 231, 96, 224, 0, 177, 234, 158, 177, 173, 61, 241, 238, 192, 46, 114, 10, 218, 165, 16, 76, 107, 217, 253, 136]),
			
			// Value
			"123456789"
		],
		
		// Result
		result: Buffer.from([8, 136, 58, 63, 129, 100, 25, 212, 206, 91, 244, 78, 50, 12, 36, 197, 176, 155, 6, 33, 199, 15, 183, 128, 215, 163, 92, 134, 87, 11, 211, 84, 117])
	},
	{
	
		// Name
		name: "pedersenCommitSum",
		
		// Paramaters
		parameters: [
		
			// Positive commits
			[
				Buffer.from([8, 136, 58, 63, 129, 100, 25, 212, 206, 91, 244, 78, 50, 12, 36, 197, 176, 155, 6, 33, 199, 15, 183, 128, 215, 163, 92, 134, 87, 11, 211, 84, 117]),
				Buffer.from([9, 164, 63, 223, 156, 241, 239, 231, 125, 110, 50, 138, 144, 34, 221, 249, 252, 235, 32, 4, 226, 220, 207, 6, 150, 57, 117, 66, 237, 156, 106, 97, 67]),
				Buffer.from([9, 75, 33, 217, 101, 86, 172, 94, 145, 197, 47, 190, 236, 70, 33, 236, 241, 8, 145, 7, 2, 248, 184, 174, 163, 25, 123, 131, 139, 117, 91, 1, 33])
			],
			
			// Negative commits
			[
			
				Buffer.from([8, 188, 86, 132, 108, 240, 153, 42, 188, 27, 187, 111, 38, 125, 251, 166, 147, 144, 168, 159, 109, 244, 197, 111, 56, 190, 193, 139, 132, 223, 20, 87, 37]),
				Buffer.from([8, 229, 159, 56, 208, 230, 86, 239, 29, 198, 88, 85, 75, 102, 128, 86, 246, 217, 13, 85, 93, 230, 10, 244, 107, 95, 174, 28, 89, 131, 130, 55, 112])
			]
		],
		
		// Result
		result: Buffer.from([9, 70, 61, 13, 188, 1, 93, 103, 36, 254, 195, 141, 11, 41, 239, 248, 253, 221, 31, 106, 101, 70, 10, 76, 163, 163, 148, 144, 77, 89, 219, 97, 37])
	},
	{
	
		// Name
		name: "pedersenCommitToPublicKey",
		
		// Paramaters
		parameters: [
		
			// Commit
			Buffer.from([8, 136, 58, 63, 129, 100, 25, 212, 206, 91, 244, 78, 50, 12, 36, 197, 176, 155, 6, 33, 199, 15, 183, 128, 215, 163, 92, 134, 87, 11, 211, 84, 117])
		],
		
		// Result
		result: Buffer.from([2, 136, 58, 63, 129, 100, 25, 212, 206, 91, 244, 78, 50, 12, 36, 197, 176, 155, 6, 33, 199, 15, 183, 128, 215, 163, 92, 134, 87, 11, 211, 84, 117])
	},
	{
	
		// Name
		name: "publicKeyToPedersenCommit",
		
		// Paramaters
		parameters: [
		
			// Public key
			Buffer.from([2, 136, 58, 63, 129, 100, 25, 212, 206, 91, 244, 78, 50, 12, 36, 197, 176, 155, 6, 33, 199, 15, 183, 128, 215, 163, 92, 134, 87, 11, 211, 84, 117])
		],
		
		// Result
		result: Buffer.from([8, 136, 58, 63, 129, 100, 25, 212, 206, 91, 244, 78, 50, 12, 36, 197, 176, 155, 6, 33, 199, 15, 183, 128, 215, 163, 92, 134, 87, 11, 211, 84, 117])
	},
	{
	
		// Name
		name: "createSingleSignerSignature",
		
		// Paramaters
		parameters: [
		
			// Message
			Buffer.from([16, 243, 249, 118, 236, 253, 137, 27, 149, 172, 141, 221, 236, 124, 164, 22, 133, 245, 229, 176, 52, 250, 203, 164, 163, 239, 140, 61, 49, 159, 234, 84]),
			
			// Secret key
			Buffer.from([140, 56, 130, 251, 215, 150, 96, 133, 231, 96, 224, 0, 177, 234, 158, 177, 173, 61, 241, 238, 192, 46, 114, 10, 218, 165, 16, 76, 107, 217, 253, 136]),
			
			// Secret nonce
			null,
			
			// Public key
			Buffer.from([2, 80, 13, 41, 99, 167, 103, 198, 190, 1, 33, 178, 202, 3, 80, 245, 75, 55, 71, 59, 224, 102, 162, 211, 13, 187, 196, 6, 93, 91, 31, 238, 65]),
			
			// Public nonce
			null,
			
			// Public nonce total
			null
		]
	},
	{
	
		// Name
		name: "createSingleSignerSignature",
		
		// Paramaters
		parameters: [
		
			// Message
			Buffer.from([16, 243, 249, 118, 236, 253, 137, 27, 149, 172, 141, 221, 236, 124, 164, 22, 133, 245, 229, 176, 52, 250, 203, 164, 163, 239, 140, 61, 49, 159, 234, 84]),
			
			// Secret key
			Buffer.from([140, 56, 130, 251, 215, 150, 96, 133, 231, 96, 224, 0, 177, 234, 158, 177, 173, 61, 241, 238, 192, 46, 114, 10, 218, 165, 16, 76, 107, 217, 253, 136]),
			
			// Secret nonce
			Buffer.from([231, 112, 203, 230, 49, 184, 110, 101, 65, 115, 85, 21, 125, 70, 150, 192, 169, 239, 244, 133, 168, 240, 160, 176, 5, 164, 232, 110, 94, 49, 249, 201]),
			
			// Public key
			Buffer.from([2, 80, 13, 41, 99, 167, 103, 198, 190, 1, 33, 178, 202, 3, 80, 245, 75, 55, 71, 59, 224, 102, 162, 211, 13, 187, 196, 6, 93, 91, 31, 238, 65]),
			
			// Public nonce
			Buffer.from([3, 253, 251, 204, 250, 236, 199, 28, 230, 100, 178, 224, 59, 143, 181, 53, 239, 132, 151, 234, 116, 58, 13, 38, 68, 207, 178, 103, 82, 75, 108, 124, 238]),
			
			// Public nonce total
			Buffer.from([3, 253, 251, 204, 250, 236, 199, 28, 230, 100, 178, 224, 59, 143, 181, 53, 239, 132, 151, 234, 116, 58, 13, 38, 68, 207, 178, 103, 82, 75, 108, 124, 238])
		],
		
		// Result
		result: Buffer.from([238, 124, 108, 75, 82, 103, 178, 207, 68, 38, 13, 58, 116, 234, 151, 132, 239, 53, 181, 143, 59, 224, 178, 100, 230, 28, 199, 236, 250, 204, 251, 253, 187, 131, 23, 150, 199, 52, 114, 254, 217, 57, 254, 25, 124, 211, 160, 145, 227, 148, 184, 52, 125, 228, 224, 32, 71, 31, 8, 83, 97, 181, 138, 66])
	},
	{
	
		// Name
		name: "addSingleSignerSignatures",
		
		// Paramaters
		parameters: [
		
			// Signatures
			[
				Buffer.from([244, 154, 253, 204, 19, 193, 100, 128, 175, 242, 127, 200, 108, 90, 166, 64, 231, 7, 46, 160, 98, 227, 217, 12, 207, 203, 255, 22, 32, 166, 108, 188, 161, 66, 204, 149, 52, 20, 221, 38, 89, 81, 235, 96, 108, 208, 102, 9, 231, 5, 27, 163, 199, 20, 78, 25, 25, 113, 114, 152, 209, 29, 201, 215]),
				Buffer.from([179, 53, 230, 167, 182, 203, 26, 10, 159, 51, 46, 224, 132, 195, 80, 88, 176, 26, 53, 171, 49, 93, 113, 144, 18, 194, 168, 226, 134, 50, 83, 75, 93, 45, 78, 68, 224, 18, 231, 177, 189, 170, 227, 104, 58, 8, 214, 220, 149, 102, 43, 251, 252, 210, 132, 188, 89, 13, 196, 86, 49, 161, 245, 49]),
				Buffer.from([64, 31, 171, 251, 67, 226, 250, 159, 166, 80, 7, 235, 169, 85, 26, 114, 60, 178, 66, 183, 93, 49, 74, 239, 30, 4, 216, 32, 126, 141, 49, 184, 11, 183, 140, 188, 144, 215, 206, 167, 100, 235, 126, 138, 54, 252, 125, 111, 42, 249, 95, 65, 70, 175, 112, 186, 167, 219, 27, 118, 77, 217, 253, 93])
			],
			
			// Public nonce total
			Buffer.from([3, 75, 83, 50, 134, 226, 168, 194, 18, 144, 113, 93, 49, 171, 53, 26, 176, 88, 80, 195, 132, 224, 46, 51, 159, 10, 26, 203, 182, 167, 230, 53, 179])
		],
		
		// Result
		result: Buffer.from([179, 53, 230, 167, 182, 203, 26, 10, 159, 51, 46, 224, 132, 195, 80, 88, 176, 26, 53, 171, 49, 93, 113, 144, 18, 194, 168, 226, 134, 50, 83, 75, 200, 229, 112, 198, 24, 160, 192, 192, 63, 71, 5, 165, 246, 247, 11, 155, 168, 101, 166, 223, 10, 151, 67, 144, 26, 90, 82, 101, 80, 152, 188, 103])
	},
	{
	
		// Name
		name: "verifySingleSignerSignature",
		
		// Paramaters
		parameters: [
		
			// Signature
			Buffer.from([244, 154, 253, 204, 19, 193, 100, 128, 175, 242, 127, 200, 108, 90, 166, 64, 231, 7, 46, 160, 98, 227, 217, 12, 207, 203, 255, 22, 32, 166, 108, 188, 161, 66, 204, 149, 52, 20, 221, 38, 89, 81, 235, 96, 108, 208, 102, 9, 231, 5, 27, 163, 199, 20, 78, 25, 25, 113, 114, 152, 209, 29, 201, 215]),
			
			// Message
			Buffer.from([16, 243, 249, 118, 236, 253, 137, 27, 149, 172, 141, 221, 236, 124, 164, 22, 133, 245, 229, 176, 52, 250, 203, 164, 163, 239, 140, 61, 49, 159, 234, 84]),
			
			// Public nonce
			null,
			
			// Public key
			Buffer.from([2, 80, 13, 41, 99, 167, 103, 198, 190, 1, 33, 178, 202, 3, 80, 245, 75, 55, 71, 59, 224, 102, 162, 211, 13, 187, 196, 6, 93, 91, 31, 238, 65]),
			
			// Public key total
			Buffer.from([2, 80, 13, 41, 99, 167, 103, 198, 190, 1, 33, 178, 202, 3, 80, 245, 75, 55, 71, 59, 224, 102, 162, 211, 13, 187, 196, 6, 93, 91, 31, 238, 65]),
			
			// Is partial
			false
		],
		
		// Result
		result: true
	},
	{
	
		// Name
		name: "verifySingleSignerSignature",
		
		// Paramaters
		parameters: [
		
			// Signature
			Buffer.from([179, 53, 230, 167, 182, 203, 26, 10, 159, 51, 46, 224, 132, 195, 80, 88, 176, 26, 53, 171, 49, 93, 113, 144, 18, 194, 168, 226, 134, 50, 83, 75, 93, 45, 78, 68, 224, 18, 231, 177, 189, 170, 227, 104, 58, 8, 214, 220, 149, 102, 43, 251, 252, 210, 132, 188, 89, 13, 196, 86, 49, 161, 245, 49]),
			
			// Message
			Buffer.from([238, 21, 90, 206, 156, 64, 41, 32, 116, 203, 106, 255, 140, 156, 205, 210, 115, 200, 22, 72, 255, 17, 73, 239, 54, 188, 234, 110, 187, 138, 62, 37]),
			
			// Public nonce
			Buffer.from([3, 75, 83, 50, 134, 226, 168, 194, 18, 144, 113, 93, 49, 171, 53, 26, 176, 88, 80, 195, 132, 224, 46, 51, 159, 10, 26, 203, 182, 167, 230, 53, 179]),
			
			// Public key
			Buffer.from([2, 82, 42, 215, 237, 127, 121, 168, 70, 111, 70, 176, 218, 86, 220, 250, 104, 75, 181, 233, 236, 92, 96, 116, 188, 221, 58, 25, 107, 96, 20, 255, 168]),
			
			// Public key total
			Buffer.from([2, 82, 42, 215, 237, 127, 121, 168, 70, 111, 70, 176, 218, 86, 220, 250, 104, 75, 181, 233, 236, 92, 96, 116, 188, 221, 58, 25, 107, 96, 20, 255, 168]),
			
			// Is partial
			true
		],
		
		// Result
		result: true
	},
	{
	
		// Name
		name: "singleSignerSignatureFromData",
		
		// Paramaters
		parameters: [
		
			// Data
			Buffer.from([179, 53, 230, 167, 182, 203, 26, 10, 159, 51, 46, 224, 132, 195, 80, 88, 176, 26, 53, 171, 49, 93, 113, 144, 18, 194, 168, 226, 134, 50, 83, 75, 93, 45, 78, 68, 224, 18, 231, 177, 189, 170, 227, 104, 58, 8, 214, 220, 149, 102, 43, 251, 252, 210, 132, 188, 89, 13, 196, 86, 49, 161, 245, 49])
		],
		
		// Result
		result: Buffer.from([179, 53, 230, 167, 182, 203, 26, 10, 159, 51, 46, 224, 132, 195, 80, 88, 176, 26, 53, 171, 49, 93, 113, 144, 18, 194, 168, 226, 134, 50, 83, 75, 93, 45, 78, 68, 224, 18, 231, 177, 189, 170, 227, 104, 58, 8, 214, 220, 149, 102, 43, 251, 252, 210, 132, 188, 89, 13, 196, 86, 49, 161, 245, 49])
	},
	{
	
		// Name
		name: "compactSingleSignerSignature",
		
		// Paramaters
		parameters: [
		
			// Signature
			Buffer.from([179, 53, 230, 167, 182, 203, 26, 10, 159, 51, 46, 224, 132, 195, 80, 88, 176, 26, 53, 171, 49, 93, 113, 144, 18, 194, 168, 226, 134, 50, 83, 75, 93, 45, 78, 68, 224, 18, 231, 177, 189, 170, 227, 104, 58, 8, 214, 220, 149, 102, 43, 251, 252, 210, 132, 188, 89, 13, 196, 86, 49, 161, 245, 49])
		],
		
		// Result
		result: Buffer.from([75, 83, 50, 134, 226, 168, 194, 18, 144, 113, 93, 49, 171, 53, 26, 176, 88, 80, 195, 132, 224, 46, 51, 159, 10, 26, 203, 182, 167, 230, 53, 179, 49, 245, 161, 49, 86, 196, 13, 89, 188, 132, 210, 252, 251, 43, 102, 149, 220, 214, 8, 58, 104, 227, 170, 189, 177, 231, 18, 224, 68, 78, 45, 93])
	},
	{
	
		// Name
		name: "uncompactSingleSignerSignature",
		
		// Paramaters
		parameters: [
		
			// Signature
			Buffer.from([75, 83, 50, 134, 226, 168, 194, 18, 144, 113, 93, 49, 171, 53, 26, 176, 88, 80, 195, 132, 224, 46, 51, 159, 10, 26, 203, 182, 167, 230, 53, 179, 49, 245, 161, 49, 86, 196, 13, 89, 188, 132, 210, 252, 251, 43, 102, 149, 220, 214, 8, 58, 104, 227, 170, 189, 177, 231, 18, 224, 68, 78, 45, 93])
		],
		
		// Result
		result: Buffer.from([179, 53, 230, 167, 182, 203, 26, 10, 159, 51, 46, 224, 132, 195, 80, 88, 176, 26, 53, 171, 49, 93, 113, 144, 18, 194, 168, 226, 134, 50, 83, 75, 93, 45, 78, 68, 224, 18, 231, 177, 189, 170, 227, 104, 58, 8, 214, 220, 149, 102, 43, 251, 252, 210, 132, 188, 89, 13, 196, 86, 49, 161, 245, 49])
	},
	{
	
		// Name
		name: "combinePublicKeys",
		
		// Paramaters
		parameters: [
		
			// Public keys
			[
				Buffer.from([3, 231, 227, 221, 84, 124, 195, 23, 31, 253, 196, 3, 130, 79, 204, 93, 93, 3, 113, 42, 41, 244, 89, 202, 16, 102, 140, 40, 100, 192, 136, 233, 81]),
				Buffer.from([3, 60, 68, 219, 125, 138, 204, 251, 141, 137, 173, 161, 137, 52, 196, 229, 218, 249, 144, 45, 248, 99, 138, 62, 149, 157, 141, 87, 170, 108, 169, 119, 205]),
				Buffer.from([3, 1, 29, 96, 106, 209, 189, 132, 112, 209, 182, 219, 246, 203, 94, 174, 37, 228, 46, 161, 181, 89, 21, 160, 137, 155, 90, 38, 2, 12, 89, 189, 111])
			]
		],
		
		// Result
		result: Buffer.from([2, 250, 11, 42, 74, 163, 190, 199, 100, 216, 149, 242, 172, 99, 27, 124, 145, 172, 54, 150, 132, 125, 8, 250, 27, 92, 229, 26, 169, 223, 140, 26, 62])
	},
	{
	
		// Name
		name: "createSecretNonce",
		
		// Paramaters
		parameters: []
	},
	{
	
		// Name
		name: "createMessageHashSignature",
		
		// Paramaters
		parameters: [
		
			// Message hash
			Buffer.from([227, 176, 196, 66, 152, 252, 28, 20, 154, 251, 244, 200, 153, 111, 185, 36, 39, 174, 65, 228, 100, 155, 147, 76, 164, 149, 153, 27, 120, 82, 184, 85]),
			
			// Secret key
			Buffer.from([140, 56, 130, 251, 215, 150, 96, 133, 231, 96, 224, 0, 177, 234, 158, 177, 173, 61, 241, 238, 192, 46, 114, 10, 218, 165, 16, 76, 107, 217, 253, 136])
		],
		
		// Result
		result: Buffer.from([48, 69, 2, 33, 0, 234, 79, 139, 17, 199, 194, 76, 177, 104, 140, 127, 156, 68, 153, 236, 146, 156, 240, 149, 124, 131, 104, 251, 107, 205, 67, 126, 38, 133, 175, 13, 91, 2, 32, 113, 84, 61, 44, 7, 123, 250, 192, 91, 116, 48, 112, 104, 176, 110, 217, 106, 8, 187, 79, 221, 204, 248, 160, 165, 205, 19, 208, 211, 134, 134, 191])
	},
	{
	
		// Name
		name: "verifyMessageHashSignature",
		
		// Paramaters
		parameters: [
		
			// Signature
			Buffer.from([48, 69, 2, 33, 0, 234, 79, 139, 17, 199, 194, 76, 177, 104, 140, 127, 156, 68, 153, 236, 146, 156, 240, 149, 124, 131, 104, 251, 107, 205, 67, 126, 38, 133, 175, 13, 91, 2, 32, 113, 84, 61, 44, 7, 123, 250, 192, 91, 116, 48, 112, 104, 176, 110, 217, 106, 8, 187, 79, 221, 204, 248, 160, 165, 205, 19, 208, 211, 134, 134, 191]),
		
			// Message hash
			Buffer.from([227, 176, 196, 66, 152, 252, 28, 20, 154, 251, 244, 200, 153, 111, 185, 36, 39, 174, 65, 228, 100, 155, 147, 76, 164, 149, 153, 27, 120, 82, 184, 85]),
			
			// Public key
			Buffer.from([3, 231, 227, 221, 84, 124, 195, 23, 31, 253, 196, 3, 130, 79, 204, 93, 93, 3, 113, 42, 41, 244, 89, 202, 16, 102, 140, 40, 100, 192, 136, 233, 81])
		],
		
		// Result
		result: true
	}
];


// Main function
(async () => {

	// Go through all modules
	for(let module of MODULES) {
	
		// Check if module uses asm.js
		if(module.endsWith(".asmjs")) {
		
			// Remove WASM support
			WebAssembly = undefined;
			
			// Fix module name
			module = module.substring(0, module.length - ".asmjs".length);
		}
		
		// Load module
		const library = require(module);

		// Go through all tests
		for(const test of TESTS) {
		
			// Check if library implements the test
			if(test.name in library) {
		
				// Run test
				let result = library[test.name](...test.parameters);
				
				// Check if result is a promise
				if(result instanceof Promise) {
				
					// Resolve result
					result = await result;
				}
				
				// Check if result is a Uint8Array
				if(result instanceof Uint8Array && !(result instanceof Buffer)) {
				
					// Make result a buffer
					result = Buffer.from(result);
				}
				
				// Otherwise check if result is an object
				else if(typeof result === "object" && result !== null) {
				
					// Go through all values in the object
					for(const key of Object.keys(result)) {
					
						// Check if value is a Uint8Array
						if(result[key] instanceof Uint8Array && !(result[key] instanceof Buffer)) {
						
							// Make value a buffer
							result[key] = Buffer.from(result[key]);
						}
					}
				}
				
				// Check if result is known
				if("result" in test) {
				
					// Check if results don't have the same type or the results differ
					if(typeof test.result !== typeof result || JSON.stringify(test.result) !== JSON.stringify(result)) {
					
						// Throw error
						throw new Error(`Failed ${test.name} test`);
					}
				}
				
				// Otherwise
				else {
				
					// Check if result is invalid
					if(result === undefined || result === null) {
					
						// Throw error
						throw new Error(`Failed ${test.name} test`);
					}
				}
			}
			
			// Otherwise
			else {
			
				// Display message
				console.log(`Skipping ${test.name} test for ${module} module`);
			}
		}
		
		// Unload module
		delete require.cache[require.resolve(module)];
	}
	
	// Display message
	console.log("Tests passed");
})();
